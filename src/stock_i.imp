/* stock_i
 * Author: Dunai Tamas (QK4U5C)
 * Creation date: 2021.10.27.

 * Keszitsuk el a specifikaciojat egy gyar keszletnyilvantarto rendszerenek. A gyar 5 fele alkatreszt kepes
 * legyartani es ezeket raktarozni.
 * A keszletnyilvantarto rendszer kepes jelezni valtozo(ko)n keresztul a gyarto egysegnek, ha valamely termek
 * keszlete a tarolo kapacitas 50%-a ala sullyed, valamint azt is, hogy hany db legyartasara van szukseg. A
 * nyilvantarto rendszernek legyen egy betesz, es egy kivesz muvelete, amelyeknek egyik parametere az, hogy
 * mely termekre vonatkozik az adott muvelet.
 * Az egyes alkatreszek tarolokapacitasa:
 *  - Termek1: 1000 db
 *  - Termek2: 2000 db
 *  - Termek3:  500 db
 *  - Termek4:  125 db
 *  - Termek5: 4000 db
 * Egy keszletnyilvantarto szoftverenek a specifikaciojat kell elkesziteni, amelynek az alabbi 
 * kovetelmenyeket kell megvalositania:
 *  - legyen egy olyan muvelet is, ami visszaadja azokat a termekeket, amelyeknel a keszlet a maximalis
 * tarolo kapacitas 50%-a ala sullyedt,
 *  - rendelkezzen egy muvelettel ami a raktarban levo termekek osszesitett darabszamat adja meg
 * A forraskod fejreszeben egy komment blokkba legyen bemasolva a feladat szovege is. Elkuldeni az archivalt
 * Atelier B projektet kell
 */

IMPLEMENTATION stock_i
REFINES stock

DEFINITIONS
    "definitions.def"

VALUES
   MaxStocks = MAX_STOCKS_DEF

CONCRETE_VARIABLES
    c_CurrentStocks,       // Same as abstract
    c_Shortages,           // Use the array returned by GetShortages() instead of the abstract set
    c_RequiredAmounts      // Same as abstract


    
INVARIANT
    c_CurrentStocks : STOCKS --> NUM_OF_STOCK_TYPE      // B0 check needs this
    & c_CurrentStocks = CurrentStocks                   // Same as abstract
    & c_RequiredAmounts : STOCKS --> NUM_OF_STOCK_TYPE  // B0 check needs this
    & c_RequiredAmounts = RequiredAmounts               // Same as abstract
    & c_Shortages : STOCKS --> BOOL                     // Array instead of set
    & dom(c_Shortages|>{TRUE}) = Shortages              // Array contains true if index is in the set
    & MaxStocks : (1..5) --> (0..4000)                  // Might help the prover later
    

INITIALISATION
    c_CurrentStocks := STOCKS*{0};  // Empty
    c_Shortages := STOCKS*{TRUE};   // Empty -> Shortage of everything
    c_RequiredAmounts := MaxStocks  // Empty -> No requirement is met yet

OPERATIONS
    Put ( ii , amt ) = //Feladat1
    BEGIN
        //Update stock
        c_CurrentStocks ( ii ) := c_CurrentStocks ( ii ) + amt;
        c_RequiredAmounts(ii) := MaxStocks(ii) - (c_CurrentStocks(ii));
        
        // Update shortages
        VAR
            curr, max2
        IN
            curr := c_CurrentStocks(ii);
            max2 := MaxStocks(ii) / 2;
            IF curr < max2
            THEN
                c_Shortages(ii) := TRUE
            ELSE
                c_Shortages(ii) := FALSE
            END
        END
    END
    ;

    Pop ( ii , amt ) = //Feladat2
    BEGIN
        c_CurrentStocks ( ii ) := c_CurrentStocks ( ii ) - amt;
        c_RequiredAmounts(ii) := MaxStocks(ii) - (c_CurrentStocks(ii));
        VAR
            curr, max2
        IN
            curr := c_CurrentStocks(ii);
            max2 := MaxStocks(ii) / 2;
            IF curr < max2
            THEN
                c_Shortages(ii) := TRUE
            ELSE
                c_Shortages(ii) := FALSE
            END
        END
    END
    ;


    res <-- GetShortage = //Feladat3
    BEGIN
        res := c_Shortages
    END
    ;


    sum <-- GetSum = //Feladat4
    BEGIN
        sum := 0;
        VAR
            ii
        IN
            ii := 0;
            WHILE ii < 5
            DO
                ii := ii+1;
                sum := sum + c_CurrentStocks(ii)
            INVARIANT
                ii : 0..5
                & sum = SIGMA(xx).( xx : 1..ii | c_CurrentStocks(xx))
            VARIANT
                5 - ii
            END
        END
    END
    ;


    res <-- GetRequiredAmount ( ii ) = // Feladat5
    BEGIN
       res := c_RequiredAmounts(ii)
    END

 END